STATEMENT_SEQUENCE -> SENTENCE STATEMENT_SEQUENCE
STATEMENT_SEQUENCE -> ' '
STATEMENT -> var ID ;
STATEMENT -> ID = EXPRESSION ;
STATEMENT -> print ( DISPLAY_LIST ) ;
STATEMENT -> while ( EBOOL ) STATEMENT
STATEMENT -> { STATEMENT_SEQUENCE }
STATEMENT -> penup ;
STATEMENT -> pendown ;
STATEMENT -> home ;
STATEMENT -> backward EXPRESSION ;
STATEMENT -> bk EXPRESSION ;
STATEMENT -> forward EXPRESSION ;
STATEMENT -> fd EXPRESSION ;
STATEMENT -> left EXPRESSION ;
STATEMENT -> lt EXPRESSION ;
STATEMENT -> right EXPRESSION ;
STATEMENT -> rt EXPRESSION ;
STATEMENT -> move EXPRESSION , EXPRESSION;
STATEMENT -> if ( EBOOL ) STATEMENT REST_IF
SENTENCE -> var ID ;
SENTENCE -> ID = EXPRESSION ;
SENTENCE -> print ( DISPLAY_LIST ) ;
SENTENCE -> while ( EBOOL ) SENTENCE
SENTENCE -> { STATEMENT_SEQUENCE }
SENTENCE -> if ( EBOOL ) SENTENCE REST_IF
REST_IF -> else STATEMENT
REST_IF -> ' '
EXPRESSION -> TERM EPRIME
EPRIME -> + TERM EPRIME
EPRIME -> - TERM EPRIME
EPRIME -> ' '
TERM -> FACTOR TPRIME
TPRIME -> * FACTOR TPRIME
TPRIME -> / FACTOR TPRIME
TPRIME -> ' '
FACTOR -> ID
FACTOR -> NUMBER
FACTOR -> STRING
FACTOR -> ( EXPRESSION )
EBOOL -> EXPRESSION == EXPRESSION
EBOOL -> EXPRESSION >= EXPRESSION
EBOOL -> EXPRESSION <= EXPRESSION
EBOOL -> EXPRESSION != EXPRESSION
EBOOL -> EXPRESSION < EXPRESSION
EBOOL -> EXPRESSION > EXPRESSION
EBOOL -> TRUE
EBOOL -> FALSE
DISPLAY_LIST -> ELEMENT ELEMENT_SEQUENCE
DISPLAY_LIST -> ' '
ELEMENT_SEQUENCE -> , ELEMENT ELEMENT_SEQUENCE
ELEMENT_SEQUENCE -> ' '
ELEMENT -> ID
ELEMENT -> NUMBER
ELEMENT -> STRING

ID -> CHARACTER (CHARACTER || DIGIT)*
NUMBER -> DIGIT (DIGIT)*
STRING -> " ANY_CHARACTER* "
TRUE -> '#t'
FALSE -> '#f'

